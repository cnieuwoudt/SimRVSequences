% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/choose_gameteFunctions.R
\name{sim_gameteInheritance}
\alias{sim_gameteInheritance}
\title{Simulate inheritance of parental gamete based on offsring's rare variant status}
\usage{
sim_gameteInheritance(RV_locus, parent_RValleles, offspring_RVstatus, chrom_map,
  allele_IDs)
}
\arguments{
\item{RV_locus}{Numeric list of length 2. A list containing (1) the chromosome upon which the rare variant resides (2) the position in cM where the rare variant resides.}

\item{parent_RValleles}{Numeric list of length 2. The paternal and maternal alleles at the disease locus (1 = RV inherited, 0 otherwise)}

\item{offspring_RVstatus}{Numeric. 1 if offspring inherits the RV from parent, 0 otherwise.}

\item{chrom_map}{Data.frame.  A data.frame consisting of three columns: column 1 contains the chromosome numbers, column 2 start postion of chromosome (in cM), column 3 end position of chromosome (in cM).}
}
\value{
A list containing (1) a list of inherited haplotype codings (2) the chiasmata locations
}
\description{
Simulate inheritance of parental gamete based on offsring's rare variant status
}
\examples{
library(SimRVPedigree)
#Read in age-specific hazards
data(AgeSpecific_Hazards)

# Simulate pedigree ascertained for multiple affected individuals
set.seed(13)
ex_RVped <- sim_RVped(onset_hazard = AgeSpecific_Hazards[,1],
                      death_hazard = AgeSpecific_Hazards[,c(2,3)],
                      part = seq(0, 100, by = 1),
                      RR = 15, FamID = 1,
                      founder_byears = c(1900, 1910),
                      ascertain_span = c(1900, 2015),
                      num_affected = 2, stop_year = 2015,
                      recall_probs = c(1, 0.75, 0.5))[[2]]

# say we are simulating gamete inheritance from the parent
# with ID 1 to the offspring with ID 3
my_chrom_map = data.frame(chrom     = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
                                        13, 14, 15, 16, 17, 18, 19, 20, 21, 22),
                          start_pos = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                        0, 0, 0, 0, 0, 0, 0, 0, 0),
                          end_pos   = c(250, 200, 190, 180, 170, 160, 150, 140, 130, 120,
                                        250, 200, 190, 180, 170, 160, 150, 140, 130, 120,
                                        100, 100))
my_chrom_map$center = round(my_chrom_map$end_pos*0.2)

my_chrom_map = data.frame(chrom     = c(1),
                          start_pos = c(0),
                          end_pos   = c(250),
                          center    = c(50))

sim_gameteInheritance(RV_locus = c(1, 150),
                      parent_RValleles = c(0, 1),
                      offspring_RVstatus = c(0),
                      chrom_map = my_chrom_map,
                      allele_IDs = c(2, 3))

my_parent_RValleles = ex_RVped[which(ex_RVped$ID == 1),
                               which(colnames(ex_RVped) \%in\% c("DA1", "DA2"))]

my_offspring_RVstatus = sum(ex_RVped[which(ex_RVped$ID == 3),
                                     which(colnames(ex_RVped) \%in\%
                                     c("DA1", "DA2"))])

my_allele_IDs = c(2, 3)

sim_gameteInheritance(RV_locus = c(1, 150),
                      parent_RValleles = my_parent_RValleles,
                      offspring_RVstatus = my_offspring_RVstatus,
                      chrom_map = my_chrom_map,
                      allele_IDs = c(2, 3))

dad_combos <- ex_RVped[which(!is.na(ex_RVped$dad_id)), c(2, 4)]
mom_combos <- ex_RVped[which(!is.na(ex_RVped$mom_id)), c(2, 5)]

colnames(dad_combos)[2] <- colnames(mom_combos)[2] <- "par_ID"
po_combos <- rbind(dad_combos, mom_combos)

system.time( for (i in 1:nrow(po_combos)) {
 sim_gameteInheritance(RV_locus = my_RV_locus,
                      parent_RValleles = ex_RVped[which(ex_RVped$ID == po_combos[i, 2]), c(7, 8)],
                      offspring_RVstatus = sum(ex_RVped[which(ex_RVped$ID == po_combos[i, 1]), c(7, 8)]),
                      chrom_map = my_chrom_map,
                      allele_IDs = c(2, 3))
})

}

